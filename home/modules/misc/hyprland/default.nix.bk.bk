# Configuraciones generales para hyprland
# -> Programas que se inician junto con el wm
# -> Ventanas de trabajo y monitores
# -> Mejoras generales

_:
{
  config,
  lib,
  pkgs,
  ...
}:
let
  cfg = config.wayland.windowManager.hyprland;
  cfg_hypr = config.programs.hyprland;
  startupScript = pkgs.writeShellScriptBin "start" ''
    ${pkgs.waybar}/bin/waybar &
    ${pkgs.swww}/bin/swww init &
    "random-wp" &
  '';
  # Reglas de opacidad y transparencia
  defaultOpacityRules = {
    terminal = {
      wezterm = "0.90 0.90";
      foot = "0.90 0.90";
    };
    apps = {
      firefox = "0.10 0.10";
      lutris = "0.90 0.90";
      steam = "0.80 0.80";
      spotify = "0.80 0.80";
      discord = "0.80 0.80";
      code = "0.80 0.80";
      thunar = "0.80 0.80";
    };
    system = {
      dunst = "0.90 0.90";
      pavucontrol = "0.80 0.70";
      polkit = "0.80 0.70";
    };
  };

  toRegex =
    list:
    let
      elements = lib.concatStringsSep "|" list;
    in
    "^(${elements})$";

  defaultApps = {
    terminal = config.apps.terminal;
    altBrowser = "chromium";
    editor = config.apps.editor;
    launcher = "rofi -show drun -show-icons";
    mixer = "pulsemixer";
    imageEditor = "gimp";
    diskUsage = "duf";
    systemMonitor = "btop";
    gameClient = "steam";
    gameLauncher = "lutris";
    bluetooth = "bluetoothctl";
    email = "thunderbird";
    music = "spotify";
  };
  # Toma screenshot fullscreen (wayland)
  mkScreenshotCmd =
    dir:
    "grim -o $(hyprctl -j activeworkspace | jq -r '.monitor') ${dir}/$(date +%Y-%m-%d_%H-%M-%S).png";
in
{
  options.programs.hyprland.enable = lib.mkEnableOption "hyprland";
  options.wayland.windowManager.hyprland = {
    monitors = lib.mkOption {
      type = lib.types.listOf lib.types.str;
      default = [
        # Mi configuracion actual de monitores se carga por defecto
        "DP-1,1920x1080@144,1920x0,1"
        "HDMI-A-1,1920x1080@60,0x0,1"
      ];
      description = "Configuracion para los monitores utilizados en el sistema.";
    };

    workspaces = lib.mkOption {
      type = lib.types.listOf lib.types.str;
      default = [
        "1, monitor:DP-1"
        "2, monitor:DP-1"
        "3, monitor:DP-1"
        "4, monitor:DP-1"
        "5, monitor:DP-1"
        "6, monitor:DP-1"
        "7, monitor:HDMI-A-1" # Esta ventana de trabajo estara reservada para el segundo monitor
        "8, monitor:DP-1"
        "9, monitor:DP-1"
      ];
      description = "Ventanas de trabajo asignadas por monitor";
    };

    visuals = {
      blur = lib.mkOption {
        type = with lib.types; attrsOf anything;
        default = {
          size = 6;
          passes = 3;
          new_optimizations = true;
          ignore_opacity = true;
          noise = "0.1";
          contrast = "1.1";
          brightness = "1.2";
          xray = true;
        };
        description = "Activa la configuracion de blur para hyprland";
      };

      animation = {
        enable = lib.mkEnableOption "animations";
        beziers = lib.mkOption {
          type = with lib.types; listOf str;
          default = [
            "fluent_decel, 0, 0.2, 0.4, 1"
            "easeOutCirc, 0, 0.55, 0.45, 1"
            "easeOutCubic, 0.33, 1, 0.68, 1"
            "easeinoutsine, 0.37, 0, 0.63, 1"
          ];
          description = "Activa animaciones en el sistema";
        };
      };

      transparency = {
        enable = lib.mkEnableOption "Activa la transparencia de las aplicaciones";
        opacityRules = lib.mkOption {
          type = with lib.types; attrsOf (attrsOf str);
          default = defaultOpacityRules;
          description = "Custom opacity rules for different applications";
        };

      };

      rules = lib.mkOption {
        type = with lib.types; listOf str;
        default = [
          "windowsIn, 1, 1.7, easeOutCubic, slide"
          "windowsOut, 1, 1.7, easeOutCubic, slide"
          "windowsMove, 1, 2.5, easeinoutsine, slide"
          "fadeIn, 1, 3, easeOutCubic"
          "fadeOut, 1, 3, easeOutCubic"
          "fadeSwitch, 1, 5, easeOutCirc"
          "fadeShadow, 1, 5, easeOutCirc"
          "fadeDim, 1, 6, fluent_decel"
          "border, 1, 2.7, easeOutCirc"
          "workspaces, 1, 2, fluent_decel, slide"
          "specialWorkspace, 1, 3, fluent_decel, slidevert"
        ];
        description = "Configuraciones para las animaciones";
      };

      windowRules = {
        workspaceRules = lib.mkOption {
          type = with lib.types; listOf str;
          default = [
            "workspace 2, ^(firefox)$"
            "workspace 3, ^(chromium)$"
            "workspace 4, ^(Steam)$"
            "workspace 4, ^(lutris)$"
            "workspace 5, ^(gimp)$"
            "workspace 8, ^(discord)$"
            "workspace 9, ^(thunderbird)$"
            "workspace 10, ^(Spotify)$"
            "workspace 10, ^(Spotify ( Premium)?)$"
            "workspace 10, ^(Spotify ( Free)?)$"
          ];
          description = "Asignacion de programas en los espacios de trabajo";
        };

        opacityRules = lib.mkOption {
          type = with lib.types; listOf str;
          default = [
            "opacity 0.90 0.90,class:^(${config.apps.terminal})$"
            "opacity 0.90 0.90,class:^(${config.apps.browser})$"
            "opacity 0.90 0.90,class:^(foot)$"
            "opacity 0.90 0.90,class:^(lutris)$"
            "opacity 0.80 0.80,class:^(Steam)$"
            "opacity 0.80 0.80,class:^(steam)$"
            "opacity 0.80 0.80,class:^(steamwebhelper)$"
            "opacity 0.80 0.80,class:^(Spotify)$"
            "opacity 0.90 0.90,class:^(dunst)$"
            "opacity 0.90 0.90,class:^(Dunst)$"
            "opacity 0.80 0.80,class:^(Code)$"
            "opacity 0.80 0.80,class:^(thunar)$"
            "opacity 0.80 0.80,class:^(file-roller)$"
            "opacity 0.80 0.80,class:^(nwg-look)$"
            "opacity 0.80 0.80,class:^(qt5ct)$"
            "opacity 0.80 0.80,class:^(VencordDesktop|Webcord|discord|Discord)"
            "opacity 0.80 0.70,class:^(pavucontrol)$"
            "opacity 0.80 0.70,class:^(org.kde.polkit-kde-authentication-agent-1)$"
            "opacity 0.80 0.80,class:^(org.telegram.desktop)$"
            "opacity 0.80 0.80,class:^(code-url-handler)$"
            "opacity 0.80 0.80,title:^(Spotify( Premium)?)$"
            "opacity 0.80 0.80,title:^(Spotify( Free)?)$"
            "opacity 0.80 0.80,title:^(Steam)$"
            "opacity 0.90 0.90, class:^(inlyne)$"
          ];
          description = "Transparencia en los programas";
        };

        floatRules = lib.mkOption {
          type = with lib.types; listOf str;
          default = [
            "float,class:^(org.kde.polkit-kde-authentication-agent-1)$"
            "float,class:^(pavucontrol)$"
            "float,class:^(zathura)$"
            "float,class:^(thunar)$"
            "size 1280 720, class:^(thunar)$"
            "float,title:^(Media viewer)$"
            "float,title:^(Volume Control)$"
            "float,class:^(Viewnior)$"
            "float,title:^(DevTools)$"
            "float,class:^(file_progress)$"
            "float,class:^(confirm)$"
            "float,class:^(dialog)$"
            "float,class:^(download)$"
            "float,class:^(notification)$"
            "float,class:^(error)$"
            "float,class:^(confirmreset)$"
            "float,title:^(Open File)$"
            "float,title:^(branchdialog)$"
            "float,title:^(Confirm to replace files)$"
            "float,title:^(File Operation Progress)$"
            "float,class:^(com.github.Aylur.ags)$"
            "float, title:^(Picture-in-Picture)$"
          ];
          description = "Programas que se sobreponen (ignora el tipico efecto de un wm)";
        };
      };
    };

    # Atajos de teclado
    bindings = {
      # NOTE: La tecla por defecto es la de windows (opt/start)
      modKey = lib.mkOption {
        type = lib.types.str;
        default = "SUPER";
        description = "Main modifier key";
      };

      apps = lib.mkOption {
        type = with lib.types; attrsOf str;
        default = defaultApps;
        description = "Define las aplicaciones las cuales tendran atajos de teclado";
      };

      screenshotDir = lib.mkOption {
        type = lib.types.str;
        default = "${config.xdg.userDirs.pictures}/screenshots/full";
        description = "Define el directorio en el cual se guardaran imagenes"; # Por defecto: ~/Pictures/screenshots/**
      };

      extraBinds = lib.mkOption {
        type = with lib.types; listOf str;
        default = [ ];
        description = "Atajos adicionales";
      };
    };

  };

  # imports = [ ./config ];

  config = lib.mkIf cfg_hypr.enable {
    wayland.windowManager.hyprland = {
      enable = true;
      xwayland.enable = true;
      systemd.enable = true;
      settings = {
        xwayland.force_zero_scaling = true;
        exec-once = ''${startupScript}/bin/start'';

        general = {
          monitor = cfg.monitors;
          workspace = cfg.workspaces;
          gaps_in = 5;
          gaps_out = 5;
          border_size = 2;
          "no_border_on_floating" = false;
          layout = "dwindle";
        };

        # Configuraciones del teclado (lo hace un poco mas veloz)
        input = {
          repeat_rate = 50;
          repeat_delay = 300;
        };

        misc = {
          disable_autoreload = true;
          animate_mouse_windowdragging = false;
          # no_direct_scanout = false;
          vfr = true;
          disable_splash_rendering = true;
          disable_hyprland_logo = true;
          force_default_wallpaper = 0;
        };

        decoration = {
          rounding = 1;
          blur = cfg.visuals.blur;
          dim_inactive = true;
          dim_strength = "0.3";
          fullscreen_opacity = 1;
          # drop_shadow = true;
          # shadow_ignore_window = true;
          # shadow_offset = "0 8";
          # shadow_range = 50;
          # shadow_render_power = 3;
          # "col.shadow" = "rgba(00000055)";
          blurls = [
            "lockscreen"
            "waybar"
            "popups"
          ];
        };

        animation = lib.mkIf cfg.visuals.animation.enable {
          bezier = cfg.visuals.animation.beziers;
          animation = cfg.visuals.animation.rules;
        };

        dwindle = {
          # no_gaps_when_only = true;
          pseudotile = true;
          preserve_split = true;
        };

        windowrule = cfg.visuals.windowRules.workspaceRules;

        windowrulev2 =
          (lib.optionals cfg.visuals.transparency.enable (
            # Terminal
            (lib.mapAttrsToList (
              name: opacity: "opacity ${opacity},class:^(${name})$"
            ) cfg.visuals.transparency.opacityRules.terminal)
            ++
              # Aplicaciones
              (lib.mapAttrsToList (
                name: opacity: "opacity ${opacity},class:^(${name})$"
              ) cfg.visuals.transparency.opacityRules.apps)
            ++
              # Sistema
              (lib.mapAttrsToList (
                name: opacity: "opacity ${opacity},class:^(${name})$"
              ) cfg.visuals.transparency.opacityRules.system)
          ))
          ++ cfg.visuals.windowRules.floatRules;

        layerrule =
          let
            ignorealpha = [
              "calendar"
              "notifications"
              "osd"
              "system-menu"
              "anyrun"
              "popups"
            ];
            layers = ignorealpha ++ [
              "bar"
              "gtk-layer-shell"
            ];
          in
          [
            "blur, ${toRegex layers}"
            "xray 1, ${
              toRegex [
                "bar"
                "gtk-layer-shell"
              ]
            }"
            "ignorealpha 0.2, ${
              toRegex [
                "bar"
                "gtk-layer-shell"
              ]
            }"
            "ignorealpha 0.5, ${toRegex (ignorealpha ++ [ "music" ])}"
          ];

        "$mod" = cfg.bindings.modKey;

        bind =
          # Atajos del sistema
          [
            "$mod, Q, killactive"
            "$mod, Backspace, exec, wlogout"
            "$mod CTRL, Backspace, exec, hyprctl dispatch exit"
            "$mod, Print, exec, screenshot"
            "$mod Shift, Print, exec, ${mkScreenshotCmd cfg.bindings.screenshotDir}"

            # Atajos relacionados a las ventanas
            "$mod, Tab, workspace, previous"
            "$mod, k, cyclenext"
            "$mod, k, bringactivetotop"
            "$mod, j, cyclenext, prev"
            "$mod, j, bringactivetotop"
            "$mod, F, fullscreen"
            "$mod, Space, togglefloating"

            # Ejecutar aplicaciones
            "$mod, Return, exec, ${config.apps.terminal}"
            "$mod, W, exec, ${config.apps.browser}"
            "$mod CTRL, W, exec, ${cfg.bindings.apps.altBrowser}"
            "$mod, E, exec, ${cfg.bindings.apps.terminal} -e ${cfg.bindings.apps.editor}"
            "$mod, P, exec, ${cfg.bindings.apps.launcher}"
            "$mod SHIFT, P, exec, ${cfg.bindings.apps.imageEditor}"
            "$mod, A, exec, ${cfg.bindings.apps.terminal} -e ${cfg.bindings.apps.mixer}"

            # Manejo de fondos de pantalla
            "$mod, S, exec, rofi-wp"
            "$mod SHIFT, S, exec, random-wp"
            "$mod CTRL, S, exec, setbg"

            # Utilidades del sistema
            "$mod, D, exec, ${cfg.bindings.apps.terminal} -e ${cfg.bindings.apps.diskUsage}"
            "$mod SHIFT, D, exec, ${cfg.bindings.apps.terminal} -e ${cfg.bindings.apps.systemMonitor}"

            # Multimedia y comunicacion
            "$mod, X, exec, ${cfg.bindings.apps.gameClient}"
            "$mod SHIFT, X, exec, ${cfg.bindings.apps.gameLauncher}"
            "$mod, B, exec, ${cfg.bindings.apps.terminal} -e ${cfg.bindings.apps.bluetooth}"
            "$mod, M, exec, ${cfg.bindings.apps.email}"
            "$mod SHIFT, M, exec, ${cfg.bindings.apps.music}"
          ]
          ++ cfg.bindings.extraBinds
          ++ (
            # Atajos de espacios de trabajo (workspace)
            # binds $mod + [shift +] {1..10} to [move to] workspace {1..10}
            builtins.concatLists (
              builtins.genList (
                x:
                let
                  ws =
                    let
                      c = (x + 1) / 10;
                    in
                    builtins.toString (x + 1 - (c * 10));
                in
                [
                  "$mod, ${ws}, workspace, ${toString (x + 1)}"
                  "$mod SHIFT, ${ws}, movetoworkspace, ${toString (x + 1)}"
                ]
              ) 10
            )
          );

        bindm = [
          # Para el mouse
          # WARNING: No recomiendo quitar esta configuracion
          "$mod, mouse:272, movewindow"
          "$mod, mouse:273, resizewindow"
          "$mod ALT, mouse:272, resizewindow"
        ];

      };
    };

    home.packages = with pkgs; [
      # Wayland packages
      xwayland
      xwaylandvideobridge
      wl-clipboard
      wlr-randr
      slurp
      grim
    ];
  };
}
